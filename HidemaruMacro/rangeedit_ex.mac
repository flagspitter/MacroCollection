////////////////////////////////////////////////////////////////////////
//  
//  「コメントを考慮した部分編集モード突入マクロ」 for C source
//  
//  前の関数の終了後から、自分の関数の終了位置 } までを部分編集します。
//  これにより、関数自身に対応する直前のコメント等を部分編集範囲に
//  含めることが出来ます。
//  
////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////
//  前準備
setcompatiblemode 0x000c;  // 部分編集を維持
disabledraw;
escape;
rangeeditout;
disableerrormsg; // goleftkakko でエラーを検出できることが前提

$$searchBuf = searchbuffer;
##searchOpt = searchoption;
##orgX = x;
##orgY = y;

////////////////////////////////////////////////////////////////////////
//  実行モードのようなもの

// #if 0 の関数に対応する場合 1 にする。
// ただし、ファイルタイプ別の設定が「一時的な設定」になってしまうし、
// 関数一覧を再計算してしまう。
##enableifdef = 1;

////////////////////////////////////////////////////////////////////////
//  現在位置に関わらず、
//  ・部分編集したい関数の前の関数
//  ・部分編集したい関数が最初の関数である場合、ファイルの先頭
//  のいずれかに移動する。
//  ※単純な prevoutlineitem では区別できない
//
goleftkakko;
if( result == true )
{
	// C++でクラス宣言内の関数かもしれないので、調査する。
	##posBrace = y;
	moveto ##orgX, ##orgY;
	prevoutlineitem;
	##posFunc = y;
	
	if( ##posBrace > ##posFunc )
	{
		// 関数の先頭にカーソルがいるはず
		moveto2 0, lineno - 1;
		prevoutlineitem;
	}
	else
	{
		; // クラス宣言内と判断
	}
}
else
{
	moveto2 0, lineno - 1;
	prevoutlineitem;
}

////////////////////////////////////////////////////////////////////////
//  前の関数か部分編集したい関数が、#if 0 の範囲内であるか判定する
//
if( ( ( colorcode & 0x1f ) == 0x1a ) || ( colorcode[2] == 0x1a ) )
{
	##impossible = 1;
}
nextoutlineitem;
if( ( ( colorcode & 0x1f ) == 0x1a ) || ( colorcode[2] == 0x1a ) )
{
	##impossible = 1;
}
prevoutlineitem;

////////////////////////////////////////////////////////////////////////
//// #if 0 の関数に対応する場合の処理
if( ( ##enableifdef != 0 ) && ( ##impossible != 0 ) )
{
	##colorifdef = getconfig( "ColorIfdef" );
	if( ##colorifdef != 0 )
	{
		config "xColorIfdef:0";
	}
	##impossible = 0;
}

////////////////////////////////////////////////////////////////////////
//  #if 0 内では { } の対応が取れず、真っ当な方法ではどうしようもない
//  そのための分岐
//
if( ##impossible != 0 )
{
	// #if 0 が関わっている場合は、単純にrangeeditinを実行する
	// しかたないね
	moveto ##orgX, ##orgY;
	rangeeditin;
}
else
{
	// この時点で、部分編集する関数の「１つ前」の関数か、
	// ファイルの先頭にカーソルがいる
	
	if( y == 0 )
	{
		// カーソルがファイルの先頭にいるので、
		// 部分編集する関数は最初の関数である。
		nextoutlineitem;
		moveto2 0, lineno - 1;
		
		// 先頭の関数は、前関数の指針を使えないため、
		// 「関数の直前から連続するコメント」を部分編集範囲と見なす。
		while( ( colorcode[2] == 3 ) || ( ( colorcode & 0x0000001f ) == 3 ) )
		{
			moveto2 0, lineno - 1;
			if( y == 0 )
			{
				break;
			}
		}
	}
	else
	{
		// 前の関数終了後、次の行を部分編集開始位置とする
		searchdown "{";
		gorightkakko;
		moveto2 0, lineno + 1;
	}
	
	// この時点で、部分編集すべき先頭位置にカーソルがいる
	// その関数終了位置の次の行を部分編集の終端位置とする
	beginsel;
	nextoutlineitem;
	searchdown "{";
	gorightkakko;
	moveto2 0, lineno + 2;
	rangeeditin;
}

////////////////////////////////////////////////////////////////////////
//// #if 0 の関数に対応する場合の処理
if( ( ##enableifdef != 0 ) && ( ##colorifdef != 0 ) )
{
	config "xColorIfdef:1";
}


////////////////////////////////////////////////////////////////////////
//  後始末
//  カーソル位置を元に戻す。
//  ※もし、部分編集範囲に異常があったら、これにより自動的に解除される。
moveto ##orgX, ##orgY;
end:
setsearch $$searchBuf, ##searchOpt;
